#+PROPERTY: header-args :tangle  /home/sliberman/.emacs.d/init.el
#+STARTUP: content

* Early file
:PROPERTIES:
:VISIBILITY: folded
:END:
#+begin_src emacs-lisp :tangle /home/sliberman/.emacs.d/early-init.el
;;; backup/autosave
(setq package-enable-at-startup nil)

(defvar native-comp-deferred-compilation-deny-list nil)
#+end_src

* Init file
** Header
:PROPERTIES:
:VISIBILITY: folded
:END:
#+begin_src emacs-lisp
;;; package --- Init.el
;;; Commentary: This is my Emacs configuration. It works with the current bleeding edge Emacs version.
;;; Code:
#+end_src

** Elpaca
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                       :ref nil
                       :files (:defaults (:exclude "extensions"))
                       :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Configuration
:PROPERTIES:
:VISIBILITY: all
:END:
#+begin_src emacs-lisp
(auto-save-visited-mode 1)
(make-directory "~/.emacs.d/backup/" t)
(make-directory "~/.emacs.d/autosave/" t)
(defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
(setq backup-directory-alist (list (cons ".*" backup-dir)))
(setq auto-save-list-file-prefix autosave-dir)
(setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
(setq agenda-file "~/Documents/agenda.org")
(setq notes-directory "~/Documents/Notes/")

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(setq initial-scratch-message "")

(column-number-mode 1)

(defun set-window-faces (frame)
  "Set font families and sizes for all frames.
FRAME is the frame where the setting gets done."
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "JetBrains Mono" :height 120)
  (remove-hook 'after-make-frame-functions 'set-window-faces))

(if (and (boundp 'server-process)
         (processp server-process)
         (server-running-p))
    (add-hook 'after-make-frame-functions #'set-window-faces)
  (set-window-faces nil))

(setq-default tab-width 4)
#+end_src
** Evil Mode
#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-mode 1)
  (evil-global-set-key 'normal (kbd "C-M-u") 'universal-argument)
  (evil-global-set-key 'insert (kbd "C-M-u") 'universal-argument)
  (evil-global-set-key 'visual (kbd "C-M-u") 'universal-argument)
  (evil-global-set-key 'insert (kbd "C-g") 'evil-normal-state)
  (evil-global-set-key 'visual (kbd "C-g") 'evil-normal-state)
  (dolist (map (list evil-normal-state-map evil-insert-state-map evil-visual-state-map))
    (define-key map (kbd "C-.") 'embark-act)
    (define-key map (kbd "M-.") 'embark-dwim)
    (define-key map (kbd "C-h B") 'embark-bindings))
  (dolist (map (list evil-normal-state-map))
    (define-key map (kbd "go") 'evil-avy-goto-char))
  ;; Buffers that have a different initial mode than normal
  (evil-set-initial-state 'inferior-python-mode 'normal)
  :custom
  (evil-goto-definition-functions '(evil-goto-definition-xref evil-goto-definition-imenu evil-goto-definition-semantic evil-goto-definition-search))
  (evil-want-keybinding nil)
  (evil-want-C-i-jump t)
  (evil-want-C-u-scroll t)
  (evil-want-Y-yank-to-eol t)
  (evil-want-fine-undo t)
  (evil-shift-width 2)
  (evil-undo-system 'undo-redo)
  (evil-symbol-word-search t)
  (evil-jumps-cross-buffers nil))

(use-package evil-collection
  :init
  (evil-collection-init))
#+end_src
** Rest of packages
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-oceanic-next t)
  (doom-themes-org-config))

(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-modal-icon nil)
  (setq doom-modeline-env-version t)
  (setq doom-modeline-time-icon nil))

(use-package all-the-icons)

(use-package nerd-icons
  :config
  (defun nerd-icons--web-mode-icon (&rest arg-overrides)
    "Get icon for a `web-mode' buffer with ARG-OVERRIDES."
    (all-the-icons--web-mode nil arg-overrides)))

(add-hook 'after-save-hook
  		  (lambda () (when (equal (f-filename buffer-file-name) "init.org")
  					   (org-babel-tangle-file "init.org"))))

(add-to-list 'exec-path "~/.local/bin")

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package calendar
  :elpaca nil
  :config
  (setq calendar-week-start-day 1))

(setq native-comp-async-report-warnings-errors nil)

(use-package vertico
  :elpaca (vertico :files (:defaults "extensions/*.el"))
  :init
  (vertico-mode 1)
  (setq vertico-cycle t)
  (unbind-key (kbd "C-m") 'vertico-map)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  (keymap-set vertico-map "M-q" #'vertico-quick-insert)
  (keymap-set vertico-map "C-q" #'vertico-quick-exit)
  :bind
  ("M-R" . #'vertico-repeat))

(use-package orderless
  :config
  (setq completion-styles '(orderless basic)
  		completion-category-defaults nil
  		completion-category-overrides '((file (styles partial-completion)))
  		completion-ignore-case t)
  (defun orderless-fast-dispatch (word index total)
    (and (= index 0) (= total 1) (length< word 4)
  		 `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

  (orderless-define-completion-style orderless-fast
    (orderless-style-dispatchers '(orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp))))

(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode 1))

(use-package corfu
  :elpaca (corfu :files (:defaults "extensions/*"))
  :config
  (corfu-popupinfo-mode 1)
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
				  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  (defun corfu-move-to-minibuffer ()
    (interactive)
    (when completion-in-region--data
      (let ((completion-extra-properties corfu--extra)
			completion-cycle-threshold completion-cycling)
		(apply #'consult-completion-in-region completion-in-region--data))))
  (keymap-set corfu-map "M-m" #'corfu-move-to-minibuffer)
  (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)
  (dolist (map (list corfu-map minibuffer-mode-map))
    (define-key map (kbd "C-.") 'embark-act)
    (define-key map (kbd "M-.") 'embark-dwim)
    (define-key map (kbd "C-h B") 'embark-bindings))
  :custom
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  (corfu-auto t)
  (corfu-auto-prefix 3)

  :bind
  (:map corfu-map
  		("TAB" . corfu-next)
  		([tab] . corfu-next)
  		("S-TAB" . corfu-previous)
  		([backtab] . corfu-previous)
  		("M-d" . corfu-popupinfo-toggle))

  :init
  (global-corfu-mode 1))

(use-package corfu-mouse
  :elpaca (corfu-mouse :repo "akib/emacs-corfu-mouse" :host codeberg)
  :config
  (corfu-mouse-mode 1))

(use-package kind-icon
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(setq completion-cycle-threshold 3)
(setq tab-always-indent 'complete)

(use-package embark
  :after evil
  :commands (embark-act embark-dwim embark-bindings)
  :init
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  :custom
  (embark-prompter 'embark-keymap-prompter)
  (embark-quit-after-action '((t . nil)))
  :config
  (add-to-list 'display-buffer-alist
  			   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
  				 nil
  				 (window-parameters (mode-line-format . none))))
  )

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;; :config
  ;; (add-hook 'prog-mode-hook #'(lambda ()
  ;; 							   (setq-local completion-at-point-functions
  ;; 								(list (cape-capf-buster #'(lambda ()
  ;; 															(cape-capf-super
  ;; 															 #'eglot-completion-at-point
  ;; 															 #'cape-file
  ;; 															 #'cape-dabbrev
  ;; 															 t)
  ;; 															))))))
  )

(use-package which-key
  :init
  (which-key-mode 1))

(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
  				term-mode-hook
  				shell-mode-hook
  				eshell-mode-hook
  				vterm-mode-hook
  				treemacs-mode-hook
  				inferior-python-mode-hook
  				pdf-view-mode-hook
  				compilation-mode-hook))
  (add-hook mode #'(lambda () (display-line-numbers-mode 0))))

(add-hook 'Info-mode-hook (lambda ()
  							(display-line-numbers-mode -1)))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(show-paren-mode 1)
(setq show-paren-style 'expression)
(setq show-paren-when-point-inside-paren nil)

(setq display-time-default-load-average nil)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-format "%H:%M %d-%m-%Y")
(display-time-mode)

(display-battery-mode -1)

(use-package consult
  :bind (("C-s" . consult-line)
  		 ("C-x f" . consult-find)
  		 ("C-x b" . consult-buffer)
  		 ("C-x C-b" . ibuffer)
  		 ("C-c e t" . consult-theme)
  		 ("C-x ," . consult-recent-file)
  		 ("C-c o" . consult-outline)
  		 (:map minibuffer-local-map
  			   ("C-r" . consult-history)))
  :config
  (consult-customize consult-theme :preview-key '(:debounce 0.5 any)))

(winner-mode 1)

(use-package vterm
  :commands (vterm vterm-other-window)
  :config
  (setq vterm-shell "/usr/bin/bash")
  :bind
  (("C-c x x" . 'vterm)
   ("C-c x v" . 'vterm-other-window)))

(setq inhibit-startup-message t)
(setq system-time-locale "C")
(tooltip-mode -1)
(setq visual-bell t)

(setq enable-local-eval t)

(put 'python-shell-extra-pythonpaths 'safe-local-variable (lambda (_) t))

(use-package dockerfile-mode
  :mode ("\\.dockerfile\\'" . dockerfile-mode))

(unbind-key (kbd "C-x C-z") global-map)

(use-package helpful
  :bind
  ("C-h f" . helpful-function)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h ." . helpful-at-point))

(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode))

(use-package docker
  :commands (docker docker-compose)
  :init
  (setq docker-run-async-with-buffer-function 'docker-run-async-with-buffer-vterm))

(use-package pyvenv
  :commands (pyvenv-mode pyvenv-tracking-mode)
  :config
  (pyvenv-tracking-mode 1))

(use-package poetry
  :init
  (setenv "PATH" (concat "/home/sliberman/.local/bin:" (getenv "PATH")))
  :commands (poetry))

(global-set-key (kbd "C-c r") 'revert-buffer)

(use-package org-roam
  :commands (org-roam-node-find)
  :init
  (setq org-roam-directory "/home/sliberman/Documents/Google Drive/RoamNotes/")
  :config
  (org-roam-db-autosync-mode 1)
  :bind
  ("C-c n" . 'org-roam-node-find))

(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t
      backup-directory-alist '(("." . "~/.emacs.d/backups")))

(use-package python
  :elpaca nil
  :bind (:map python-mode-map
  			  (("M-<left>" . python-indent-shift-left)
  			   ("M-<right>" . python-indent-shift-right)))
  :config
  (add-hook 'python-mode-hook #'(lambda () (require 'dap-python)))
  (add-hook 'python-mode-hook 'which-function-mode)
  (define-key inferior-python-mode-map (kbd "C-c C-k") #'(lambda () (interactive) (kill-buffer)))
  :init
  (defun try-activate-poetry-venv ()
    "Try activate poetry virtual env or fail silently"
    (ignore-errors
      (poetry-venv-workon)))
  :mode ("\\.py$" . python-mode)
  :bind
  ("C-c C-k" . 'python-shell-restart)
  :hook
  ((python-ts-mode python-mode) . eglot-ensure)
  ((python-ts-mode python-mode) . try-activate-poetry-venv))

(load-file "~/.emacs.d/fix_keywords_align.el")

;; Indent the buffer in emacs-lisp mode and lisp-data mode
(defun sergio/add-indent-to-hook ()
  "Add indent to before save hook."
  (add-hook 'before-save-hook (lambda ()
								(interactive)
								(save-excursion
								  (indent-region (point-min) (point-max)))) nil t))

(use-package terraform-mode
  :mode
  ("\\.tf$" . terraform-mode)
  :hook
  ((terraform-mode) . eglot-ensure))

(add-hook 'emacs-lisp-mode-hook 'sergio/add-indent-to-hook)
(add-hook 'lisp-data-mode-hook 'sergio/add-indent-to-hook)

(use-package markdown-mode)

(use-package project
  :elpaca nil
  :config
  (defun sergio/project-rg ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (consult-ripgrep default-directory)))
  (define-key project-prefix-map "r" 'sergio/project-rg)
  (add-to-list 'project-switch-commands (list 'sergio/project-rg "Ripgrep"))

  (setq project-switch-commands (remove '(project-vc-dir "VC-Dir") project-switch-commands))

  (defun sergio/project-poetry ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (poetry)))
  (define-key project-prefix-map "v" 'sergio/project-poetry)
  (add-to-list 'project-switch-commands (list 'sergio/project-poetry "Poetry"))

  (defun sergio/project-magit ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (magit-status)))
  (define-key project-prefix-map "m" 'sergio/project-magit)
  (add-to-list 'project-switch-commands (list 'sergio/project-magit "Magit"))

  (setq project-find-functions (list #'project-try-vc))
  (add-to-list 'project-switch-commands (list 'project-switch-to-buffer "List buffers"))
  (defun sergio/project-add-variable ()
	(interactive)
	"Add dir variable to the main project directory."
	(let ((default-directory (project-root (project-current))))
	  (call-interactively 'add-dir-local-variable)))
  (define-key project-prefix-map "V" 'sergio/project-add-variable))

(defun safe-local-variable-p (sym val) t)

(use-package dap-mode
  :config
  (setq dap-python-debugger 'debugpy)
  (setq dap-auto-configure-features '(sessions locals controls tooltip repl))
  (dap-auto-configure-mode 1)
  :bind (:map project-prefix-map
  			  ("C-c C-d C-d" . dap-debug)
  			  ("C-c C-d d" . dap-debug)
  			  ("C-c C-d k" . dap-delete-all-sessions)
  			  ("C-c C-d C-k" . dap-delete-all-sessions)
  			  ("C-c C-d e" . dap-debug-edit-template)
  			  ("C-c C-d C-e" . dap-debug-edit-template))
  :init
  (defun sergio/set-pointer-arrow ()
    (interactive)
    (setq-local x-pointer-shape x-pointer-top-left-arrow)
    (set-mouse-color "black"))
  :hook
  (treemacs-mode . sergio/set-pointer-arrow))

(use-package restclient
  :commands (restclient-mode))

(use-package ob-restclient
  :after org)

(use-package mixed-pitch)

(use-package org
  :init
  (setq org-todo-keywords (quote ((sequence "TODO(t)" "|" "ABANDONED(b)" "DONE(d)"))))
  (setq org-log-done t)
  (defun sergio/check-cell ()
    (interactive)
    (let ((cell (org-table-get-field)))
      (if (string-match "[[:graph:]]" cell)
  		  (org-table-blank-field)
  		(insert "X")
  		(org-table-align))
      (org-table-next-row)))
  :custom
  (org-ellipsis " ▼")
  (org-latex-pdf-process
   '("pdflatex -interaction nonstopmode -output-directory %o %f"
     "bibtex %b"
     "pdflatex -interaction nonstopmode -output-directory %o %f"
     "pdflatex -interaction nonstopmode -output-directory %o %f"))
  (org-latex-logfiles-extensions
   '("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist"))
  (org-confirm-babel-evaluate nil)
  (org-image-actual-width nil)
  (org-latex-caption-above nil)
  (org-src-window-setup 'current-window)
  (org-edit-src-content-indentation 0)
  (org-M-RET-may-split-line '((default)))
  (org-odt-preferred-output-format "docx")
  (org-startup-indented t)
  :hook
  (org-mode . url-handler-mode)
  (org-mode . visual-line-mode)
  (org-mode . mixed-pitch-mode)
  (org-mode . org-modern-mode)
  :config
  (set-face-attribute 'org-level-1 nil :height 2.5)
  (set-face-attribute 'org-level-2 nil :height 1.8)
  (set-face-attribute 'org-level-3 nil :height 1.5)
  (set-face-attribute 'org-level-4 nil :height 1.2)
  (set-face-attribute 'org-level-5 nil :height 1.1)
  (setq org-indent-indentation-per-level 2)
  (require 'ox-md)
  (require 'org-tempo)
  (dolist (template '(("sh" . "src shell")
  					  ("el" . "src emacs-lisp")
  					  ("py" . "src python")
  					  ("ja" . "src java")
  					  ("sql" . "src sql")
  					  ("yaml" . "src yaml")
  					  ("rest" . "src restclient")
  					  ("cc" . "src C")))
    (add-to-list 'org-structure-template-alist template))

  ;; Babel languages.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (shell . t)
     (C . t)
     (sql . t)
     (java . t)
     (restclient . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (setq org-latex-with-hyperref nil)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-agenda-files agenda-file)
  (mapcar #'(lambda (f) (add-to-list 'org-agenda-files (concat notes-directory f)))
		  (-filter #'(lambda (f) (s-ends-with? ".org" f))
				   (directory-files notes-directory)))
  :commands (org-store-link org-agenda org-capture)
  )

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

(use-package ox-latex
  :elpaca nil
  :after org
  :config
  (setq org-latex-pdf-process "latexmk"))

(use-package org-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))

(global-set-key (kbd "C-c C-l") #'org-store-link)
(global-set-key (kbd "C-c C-a") #'org-agenda)
(global-set-key (kbd "C-c C->") #'org-capture)

(use-package org-modern)

(add-hook 'prog-mode 'electric-indent-mode)
(add-hook 'prog-mode 'electric-pair-mode)

(size-indication-mode -1)

(use-package move-text
  :bind
  ("M-<up>" . move-text-up)
  ("M-<down>" . move-text-down))

(use-package jsonrpc)

(use-package eglot
  :config
  (setq-default eglot-workspace-configuration
				'(:pylsp (:plugins (
									:flake8 (:enabled t)
									:pycodestyle (:enabled :json-false)
									:pyflakes (:enabled :json-false)
									:mccabe (:enabled :json-false))
						  :configurationSources ["flake8"])))
  (setq eglot-events-buffer-config '(:size 0 :format full))
  (setq eglot-server-programs `(((rust-ts-mode rust-mode) . ("rust-analyzer"))
                                ((cmake-mode cmake-ts-mode) . ("cmake-language-server"))
                                (vimrc-mode . ("vim-language-server" "--stdio"))
                                ((python-mode python-ts-mode)
                                 . ,(eglot-alternatives
                                     '("pylsp" "pyls" ("pyright-langserver" "--stdio") "jedi-language-server")))
                                ((js-json-mode json-mode json-ts-mode)
                                 . ,(eglot-alternatives '(("vscode-json-language-server" "--stdio")
                                                          ("vscode-json-languageserver" "--stdio")
                                                          ("json-languageserver" "--stdio"))))
                                ((js-mode js-ts-mode tsx-ts-mode typescript-ts-mode typescript-mode)
                                 . ("typescript-language-server" "--stdio"))
                                ((bash-ts-mode sh-mode) . ("bash-language-server" "start"))
                                ((php-mode phps-mode)
                                 . ,(eglot-alternatives
                                     '(("phpactor" "language-server")
                                       ("php" "vendor/felixfbecker/language-server/bin/php-language-server.php"))))
                                ((c-mode c-ts-mode c++-mode c++-ts-mode objc-mode)
                                 . ,(eglot-alternatives
                                     '("clangd" "ccls")))
                                (((caml-mode :language-id "ocaml")
                                  (tuareg-mode :language-id "ocaml") reason-mode)
                                 . ("ocamllsp"))
                                ((ruby-mode ruby-ts-mode)
                                 . ("solargraph" "socket" "--port" :autoport))
                                (haskell-mode
                                 . ("haskell-language-server-wrapper" "--lsp"))
                                (elm-mode . ("elm-language-server"))
                                (mint-mode . ("mint" "ls"))
                                (kotlin-mode . ("kotlin-language-server"))
                                ((go-mode go-dot-mod-mode go-dot-work-mode go-ts-mode go-mod-ts-mode)
                                 . ("gopls"))
                                ((R-mode ess-r-mode) . ("R" "--slave" "-e"
                                                        "languageserver::run()"))
                                ((java-mode java-ts-mode) . ("jdtls"))
                                ((dart-mode dart-ts-mode)
                                 . ("dart" "language-server"
                                    "--client-id" "emacs.eglot-dart"))
                                ((elixir-mode elixir-ts-mode heex-ts-mode)
                                 . ,(if (and (fboundp 'w32-shell-dos-semantics)
                                         (w32-shell-dos-semantics))
                                        '("language_server.bat")
                                      (eglot-alternatives
                                       '("language_server.sh" "start_lexical.sh"))))
                                (ada-mode . ("ada_language_server"))
                                (scala-mode . ,(eglot-alternatives
                                                '("metals" "metals-emacs")))
                                (racket-mode . ("racket" "-l" "racket-langserver"))
                                ((tex-mode context-mode texinfo-mode bibtex-mode)
                                 . ,(eglot-alternatives '("digestif" "texlab")))
                                (erlang-mode . ("erlang_ls" "--transport" "stdio"))
                                ((yaml-ts-mode yaml-mode) . ("yaml-language-server" "--stdio"))
                                (nix-mode . ,(eglot-alternatives '("nil" "rnix-lsp" "nixd")))
                                (nickel-mode . ("nls"))
                                (gdscript-mode . ("localhost" 6008))
                                ((fortran-mode f90-mode) . ("fortls"))
                                (futhark-mode . ("futhark" "lsp"))
                                ((lua-mode lua-ts-mode) . ,(eglot-alternatives
                                                            '("lua-language-server" "lua-lsp")))
                                (zig-mode . ("zls"))
                                ((css-mode css-ts-mode)
                                 . ,(eglot-alternatives '(("vscode-css-language-server" "--stdio")
                                                          ("css-languageserver" "--stdio"))))
                                (html-mode . ,(eglot-alternatives '(("vscode-html-language-server" "--stdio") ("html-languageserver" "--stdio"))))
                                ((dockerfile-mode dockerfile-ts-mode) . ("docker-langserver" "--stdio"))
                                ((clojure-mode clojurescript-mode clojurec-mode clojure-ts-mode)
                                 . ("clojure-lsp"))
                                ((csharp-mode csharp-ts-mode)
                                 . ,(eglot-alternatives
                                     '(("OmniSharp" "-lsp")
                                       ("csharp-ls"))))
                                (purescript-mode . ("purescript-language-server" "--stdio"))
                                ((perl-mode cperl-mode) . ("perl" "-MPerl::LanguageServer" "-e" "Perl::LanguageServer::run"))
                                (markdown-mode
                                 . ,(eglot-alternatives
                                     '(("marksman" "server")
                                       ("vscode-markdown-language-server" "--stdio"))))
                                (graphviz-dot-mode . ("dot-language-server" "--stdio"))
                                (terraform-mode . ("terraform-ls" "serve"))))
  (add-hook 'pyvenv-post-activate-hooks 'eglot-ensure)
  (defun sergio/format-buffer ()
	"If in python-mode, format the buffer on save."
	(when (and (equal major-mode 'python-mode) (eglot-managed-p))
	  (eglot-format-buffer)))
  (add-hook 'before-save-hook 'sergio/format-buffer)
  (defun sergio/prepend-flymake-to-eldoc ()
	"Remove the flymake eldoc function if it is there, and then move it to the beginning of the eldoc-documentation-functions list."
    (interactive)
	(let* ((funcs eldoc-documentation-functions)
		   (funcs-with-flymake (push 'flymake-eldoc-function funcs))
		   (funcs-final (cl-remove-duplicates funcs-with-flymake :from-end t)))
	  (setq eldoc-documentation-functions funcs-final)))
  (add-hook 'eglot-managed-mode-hook 'sergio/prepend-flymake-to-eldoc))

(use-package csharp-mode
  :elpaca nil
  :init
  (add-hook 'csharp-ts-mode-hook 'dap-mode)
  (add-hook 'csharp-ts-mode-hook 'eldoc-mode)
  (add-hook 'csharp-ts-mode-hook #'(lambda () (require 'dap-netcore)))
  (add-hook 'csharp-ts-mode-hook 'which-function-mode)
  (add-hook 'csharp-ts-mode-hook #'(lambda () (setq-local tab-width 4)))
  :config
  :init
  (add-to-list 'exec-path "~/.local/omnisharp")
  (setq dap-netcore-download-url "https://github.com/Samsung/netcoredbg/releases/download/2.2.3-992/netcoredbg-linux-amd64.tar.gz")
  :mode ("\\.cs$" . csharp-ts-mode)
  :hook
  ((csharp-ts-mode csharp-mode) . eglot-ensure))

(tab-bar-mode -1)

(xterm-mouse-mode 1)

(use-package lispy
  :commands (lispy-mode))

(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-interval 1)

(setq vc-handled-backends '(Git))

(windmove-default-keybindings '(ctrl shift))

(defun +elpaca-unload-seq (e)
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

;; You could embed this code directly in the reicpe, I just abstracted it into a function.
(defun +elpaca-seq-build-steps ()
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps elpaca-build-steps))
          (list '+elpaca-unload-seq 'elpaca--activate-package)))

(use-package seq)

(use-package magit
  :bind ("C-x g" . magit-status))

(use-package json-mode
  :config
  (add-hook 'json-mode-hook #'(lambda () (indent-tabs-mode -1)))
  (add-hook 'json-mode-hook #'(lambda () (make-local-variable 'js-indent-level) (setq js-indent-level 4)))
  :mode ("\\.json$" . json-mode))

(use-package codespaces
  :config
  (codespaces-setup)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (setq tramp-ssh-controlmaster-options "")
  :bind ("C-c S" . #'codespaces-connect))

(recentf-mode 1)

(use-package forge
  :after magit)

(use-package savehist
  :elpaca nil
  :init
  (savehist-mode 1))

(use-package saveplace
  :elpaca nil
  :init
  (save-place-mode 1))

(use-package yasnippet
  :hook
  (prog-mode . yas-minor-mode))

(use-package yasnippet-snippets)

(setq backup-directory-alist
      `((".*" . "~/.emacs.d/autosave")))
(setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/autosave" t)))

(setq compilation-scroll-output t)
(setq switch-to-buffer-obey-display-actions t)
#+end_src

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer leader-def
    :keymaps '(normal insert visual)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (leader-def
    "" '(:ignore t :wk "Global leader")
    "e" '(:ignore t :wk "Emacs")
    "ee" '(sergio/open-init-org :wk "Org init file")
    "eE" #'(lambda () (interactive) (find-file user-init-file)) :wk "Init file"
    "et" '(consult-theme :wk "Pick theme"))

  (leader-def
    "r" 'revert-buffer)

  (leader-def
    "b" 'ibuffer)
  (leader-def
    "g" '(magit-status :wk "Magit"))

  (leader-def
    "p" '(:keymap project-prefix-map :wk "Projects"))

  (leader-def
    "l" '(:ignore t :wk "Eglot")
    "la" 'eglot-code-actions
    "l=" '(:ignore t :wk "Format")
    "l==" 'eglot-format-buffer
    "lr" 'eglot-rename
    "lh" 'eldoc-doc-buffer
    "le" 'flymake-show-project-diagnostics
    "ln" 'flymake-goto-next-error
    "lp" 'flymake-goto-prev-error)

  (leader-def
    "x" '(vterm-other-window :wk "Terminal"))

  (leader-def
	"," 'consult-recent-file)
  (leader-def
    "n" '(:ignore t :wk "Denote")
    "nn" '(denote-open-or-create :wk "Open note or create"))

  (leader-def
    "a"  '(:ignore :wk "Agenda")
    "af" '((lambda () (interactive) (find-file agenda-file)) :wk "Open agenda file")
    "aa" '(org-agenda-list :wk "Show agenda")))

(defun sergio/open-init-org ()
  (interactive)
  (find-file "~/Documents/src/configuration/init.org"))

(use-package evil-nerd-commenter
  :config
  (evilnc-default-hotkeys))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

(global-set-key (kbd "C-c e e") 'sergio/open-init-org)
(global-set-key (kbd "C-c e E") #'(lambda () (interactive) (find-file user-init-file)))

(use-package evil-multiedit
  :config
  (evil-define-key '(insert normal visual) evil-multiedit-mode-map (kbd "RET") nil)
  ;; Make multiedit take casing into consideration
  (defun make-evil-multiedit-case-sensitive (fn &rest args)
    (let ((case-fold-search (not iedit-case-sensitive)))
      (apply fn args)))

  (advice-add #'evil-multiedit-match-and-next :around #'make-evil-multiedit-case-sensitive)
  (evil-global-set-key 'insert (kbd "M-d") 'evil-multiedit-match-and-next)
  (evil-global-set-key 'normal (kbd "M-d") 'evil-multiedit-match-and-next)
  (evil-global-set-key 'visual (kbd "M-d") 'evil-multiedit-match-and-next)
  (evil-global-set-key 'insert (kbd "M-D") 'evil-multiedit-match-and-prev)
  (evil-global-set-key 'normal (kbd "M-D") 'evil-multiedit-match-and-prev)
  (evil-global-set-key 'visual (kbd "M-D") 'evil-multiedit-match-and-prev)
  (evil-global-set-key 'insert (kbd "C-M-d") 'evil-multiedit-match-all)
  (evil-global-set-key 'normal (kbd "C-M-d") 'evil-multiedit-match-all)
  (evil-global-set-key 'visual (kbd "C-M-d") 'evil-multiedit-match-all)
  :custom
  (evil-multiedit-use-symbols t)
  (evil-multiedit-follow-matches t)
  :bind
  )

(define-key minibuffer-mode-map (kbd "M-d") 'kill-word)

(use-package rainbow-mode
  :hook (
		 (prog-mode . rainbow-mode)
		 (org-mode . rainbow-mode))
  )

(pixel-scroll-mode 1)

(use-package eldoc
  :config
  (set-face-attribute 'eldoc-highlight-function-argument nil :box t))

(use-package eldoc-box
  :hook
  ;; (eldoc-mode . eldoc-box-hover-mode)
  (eldoc-mode . eldoc-box-hover-at-point-mode)
  :config
  ;; (add-hook 'eldoc-box-frame-hook 'toggle-scroll-bar)
  (setq eldoc-box-only-multi-line nil)
  (set-face-attribute 'eldoc-box-body nil :family "Noto Sans")
  (set-face-attribute 'eldoc-box-border nil :background "dim gray")
  (setq eldoc-box-offset '(32 32 32)))

(use-package noccur)

(setq warning-minimum-level :error)

(use-package denote
  :config
  (setq denote-directory notes-directory))

(use-package guix)

(use-package code-cells
  :init
  (with-eval-after-load 'code-cells
    (let ((map code-cells-mode-map))
      (define-key map (kbd "M-p") 'code-cells-backward-cell)
      (define-key map (kbd "M-n") 'code-cells-forward-cell)
      (define-key map (kbd "C-c C-c") 'code-cells-eval)
      ;; Overriding other minor mode bindings requires some insistence...
      (define-key map [remap jupyter-eval-line-or-region] 'code-cells-eval)))
  (with-eval-after-load 'code-cells
    (let ((map code-cells-mode-map))
      (define-key map [remap evil-search-next] (code-cells-speed-key 'code-cells-forward-cell)) ;; n
      (define-key map [remap evil-paste-after] (code-cells-speed-key 'code-cells-backward-cell)) ;; p
      (define-key map [remap evil-backward-word-begin] (code-cells-speed-key 'code-cells-eval-above)) ;; b
      (define-key map [remap evil-forward-word-end] (code-cells-speed-key 'code-cells-eval)) ;; e
      (define-key map [remap evil-jump-forward] (code-cells-speed-key 'outline-cycle)))) ;; TAB
  )

(use-package svelte-mode)
#+end_src

** Dashboard
#+begin_src emacs-lisp
;; (use-package dashboard
;;   :config
;;   (dashboard-setup-startup-hook)
;;   (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
;;   (setq dashboard-startup-banner 'logo)
;;   (setq dashboard-banner-logo-title "GNU/Emacs")
;;   (setq dashboard-projects-backend 'project-el)
;;   (setq dashboard-display-icons-p t)
;;   (setq dashboard-icon-type 'all-the-icons)
;;   (setq dashboard-set-heading-icons t)
;;   (setq dashboard-set-file-icons t)
;;   (setq dashboard-center-content t)
;;   (setq dashboard-heading-icons '((recents   . "history")
;;                                   (bookmarks . "bookmark")
;;                                   (agenda    . "calendar")
;;                                   (projects  . "rocket")
;;                                   (registers . "database")))
;;   (setq dashboard-items '((recents  . 5)
;;                           (bookmarks . 5)
;;                           (projects . 5)
;;                           (agenda . 5)
;;                           (registers . 5))))
#+end_src

** Fonts

*** Italic comments
#+begin_src emacs-lisp
;; Some comment
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
#+end_src

** Pulumi
#+begin_src emacs-lisp
(add-to-list 'exec-path "~/.pulumi/bin")
#+end_src

** Fancy scrolling
#+begin_src emacs-lisp
(pixel-scroll-precision-mode 1)
#+end_src
** Wgrep
#+begin_src emacs-lisp
(use-package wgrep)
#+end_src
** Dired
#+begin_src emacs-lisp
(use-package dired
  :elpaca nil
  :init
  (add-hook 'dired-mode-hook 'dired-hide-details-mode))

(use-package dired-gitignore
  :bind (:map dired-mode-map
	      ("C-c h" . #'dired-gitignore-global-mode)))

(use-package dired-narrow)
#+end_src

#+RESULTS:
** Ox-Pandoc
#+begin_src emacs-lisp
(use-package ox-pandoc)
#+end_src
** Ibuffer
#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
	  (quote (("default"
			   ("dired" (mode . dired-mode))
			   ("help" (or
						(mode . helpful-mode)
						(mode . help-mode)
						(mode . Info-mode)))
			   ("org" (or
					   (mode . org-mode)
					   (name . "^\\*Org.*\\*$"))
			   ("emacs" (or
						 (name . "^\\*scratch\\*$")
						 (name . "^\\*Backtrace\\*$")
						 (name . "^\\*Compile-Log\\*$")
						 (name . "^\\*Async-native-compile-log\\*$")
						 (name . "^\\*Messages\\*$")))))))
(add-hook 'ibuffer-mode-hook
		  (lambda ()
			(ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

* Fix keywords alignment
#+BEGIN_SRC emacs-lisp :tangle /home/sliberman/.emacs.d/fix_keywords_align.el
(advice-add #'calculate-lisp-indent :override #'void~calculate-lisp-indent)

(defun void~calculate-lisp-indent (&optional parse-start)
  "Add better indentation for quoted and backquoted lists."
  ;; This line because `calculate-lisp-indent-last-sexp` was defined with `defvar`
  ;; with it's value ommited, marking it special and only defining it locally. So 
  ;; if you don't have this, you'll get a void variable error.
  (defvar calculate-lisp-indent-last-sexp)
  (save-excursion
    (beginning-of-line)
    (let ((indent-point (point))
          state
          ;; setting this to a number inhibits calling hook
          (desired-indent nil)
          (retry t)
          calculate-lisp-indent-last-sexp containing-sexp)
      (cond ((or (markerp parse-start) (integerp parse-start))
             (goto-char parse-start))
            ((null parse-start) (beginning-of-defun))
            (t (setq state parse-start)))
      (unless state
        ;; Find outermost containing sexp
        (while (< (point) indent-point)
          (setq state (parse-partial-sexp (point) indent-point 0))))
      ;; Find innermost containing sexp
      (while (and retry
                  state
                  (> (elt state 0) 0))
        (setq retry nil)
        (setq calculate-lisp-indent-last-sexp (elt state 2))
        (setq containing-sexp (elt state 1))
        ;; Position following last unclosed open.
        (goto-char (1+ containing-sexp))
        ;; Is there a complete sexp since then?
        (if (and calculate-lisp-indent-last-sexp
                 (> calculate-lisp-indent-last-sexp (point)))
            ;; Yes, but is there a containing sexp after that?
            (let ((peek (parse-partial-sexp calculate-lisp-indent-last-sexp
                                            indent-point 0)))
              (if (setq retry (car (cdr peek))) (setq state peek)))))
      (if retry
          nil
        ;; Innermost containing sexp found
        (goto-char (1+ containing-sexp))
        (if (not calculate-lisp-indent-last-sexp)
            ;; indent-point immediately follows open paren.
            ;; Don't call hook.
            (setq desired-indent (current-column))
          ;; Find the start of first element of containing sexp.
          (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
          (cond ((looking-at "\\s(")
                 ;; First element of containing sexp is a list.
                 ;; Indent under that list.
                 )
                ((> (save-excursion (forward-line 1) (point))
                    calculate-lisp-indent-last-sexp)
                 ;; This is the first line to start within the containing sexp.
                 ;; It's almost certainly a function call.
                 (if (or
                      ;; Containing sexp has nothing before this line
                      ;; except the first element. Indent under that element.
                      (= (point) calculate-lisp-indent-last-sexp)

                      ;; First sexp after `containing-sexp' is a keyword. This
                      ;; condition is more debatable. It's so that I can have
                      ;; unquoted plists in macros. It assumes that you won't
                      ;; make a function whose name is a keyword.
                      ;; (when-let (char-after (char-after (1+ containing-sexp)))
                      ;;   (char-equal char-after ?:))

                      ;; Check for quotes or backquotes around.
                      (let* ((positions (elt state 9))
                             (last (car (last positions)))
                             (rest (reverse (butlast positions)))
                             (any-quoted-p nil)
                             (point nil))
                        (or
                         (when-let (char (char-before last))
                           (or (char-equal char ?')
                               (char-equal char ?`)))
                         (progn
                           (while (and rest (not any-quoted-p))
                             (setq point (pop rest))
                             (setq any-quoted-p
                                   (or
                                    (when-let (char (char-before point))
                                      (or (char-equal char ?')
                                          (char-equal char ?`)))
                                    (save-excursion
                                      (goto-char (1+ point))
                                      (looking-at-p
                                       "\\(?:back\\)?quote[\t\n\f\s]+(")))))
                           any-quoted-p))))
                     ;; Containing sexp has nothing before this line
                     ;; except the first element.  Indent under that element.
                     nil
                   ;; Skip the first element, find start of second (the first
                   ;; argument of the function call) and indent under.
                   (progn (forward-sexp 1)
                          (parse-partial-sexp (point)
                                              calculate-lisp-indent-last-sexp
                                              0 t)))
                 (backward-prefix-chars))
                (t
                 ;; Indent beneath first sexp on same line as
                 ;; `calculate-lisp-indent-last-sexp'.  Again, it's
                 ;; almost certainly a function call.
                 (goto-char calculate-lisp-indent-last-sexp)
                 (beginning-of-line)
                 (parse-partial-sexp (point) calculate-lisp-indent-last-sexp
                                     0 t)
                 (backward-prefix-chars)))))
      ;; Point is at the point to indent under unless we are inside a string.
      ;; Call indentation hook except when overridden by lisp-indent-offset
      ;; or if the desired indentation has already been computed.
      (let ((normal-indent (current-column)))
        (cond ((elt state 3)
               ;; Inside a string, don't change indentation.
               nil)
              ((and (integerp lisp-indent-offset) containing-sexp)
               ;; Indent by constant offset
               (goto-char containing-sexp)
               (+ (current-column) lisp-indent-offset))
              ;; in this case calculate-lisp-indent-last-sexp is not nil
              (calculate-lisp-indent-last-sexp
               (or
                ;; try to align the parameters of a known function
                (and lisp-indent-function
                     (not retry)
                     (funcall lisp-indent-function indent-point state))
                ;; If the function has no special alignment
                ;; or it does not apply to this argument,
                ;; try to align a constant-symbol under the last
                ;; preceding constant symbol, if there is such one of
                ;; the last 2 preceding symbols, in the previous
                ;; uncommented line.
                (and (save-excursion
                       (goto-char indent-point)
                       (skip-chars-forward " \t")
                       (looking-at ":"))
                     ;; The last sexp may not be at the indentation
                     ;; where it begins, so find that one, instead.
                     (save-excursion
                       (goto-char calculate-lisp-indent-last-sexp)
                       ;; Handle prefix characters and whitespace
                       ;; following an open paren.  (Bug#1012)
                       (backward-prefix-chars)
                       (while (not (or (looking-back "^[ \t]*\\|([ \t]+"
                                                     (line-beginning-position))
                                       (and containing-sexp
                                            (>= (1+ containing-sexp) (point)))))
                         (forward-sexp -1)
                         (backward-prefix-chars))
                       (setq calculate-lisp-indent-last-sexp (point)))
                     (> calculate-lisp-indent-last-sexp
                        (save-excursion
                          (goto-char (1+ containing-sexp))
                          (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
                          (point)))
                     (let ((parse-sexp-ignore-comments t)
                           indent)
                       (goto-char calculate-lisp-indent-last-sexp)
                       (or (and (looking-at ":")
                                (setq indent (current-column)))
                           (and (< (line-beginning-position)
                                   (prog2 (backward-sexp) (point)))
                                (looking-at ":")
                                (setq indent (current-column))))
                       indent))
                ;; another symbols or constants not preceded by a constant
                ;; as defined above.
                normal-indent))
              ;; in this case calculate-lisp-indent-last-sexp is nil
              (desired-indent)
              (t
               normal-indent))))))
#+END_SRC
