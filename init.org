#+PROPERTY: header-args :tangle  /home/sliberman/.emacs.d/init.el
#+STARTUP: content

* Early file
:PROPERTIES:
:VISIBILITY: folded
:END:
#+begin_src emacs-lisp :tangle /home/sliberman/.emacs.d/early-init.el
(setq package-enable-at-startup nil)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(defvar native-comp-deferred-compilation-deny-list nil)

(setq initial-scratch-message "")

(column-number-mode 1)

(defun set-window-faces (frame)
  "Set font families and sizes for all frames.
FRAME is the frame where the setting gets done."
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "JetBrains Mono" :height 120)
  (remove-hook 'after-make-frame-functions 'set-window-faces))

(if (and (boundp 'server-process)
	 (processp server-process)
	 (server-running-p))
    (add-hook 'after-make-frame-functions #'set-window-faces)
  (set-window-faces nil))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)

(use-package modus-themes
  :config
  (load-theme 'modus-operandi t)
  :custom
  (modus-themes-common-palette-overrides '((border-mode-line-active unspecified)
					   (border-mode-line-inactive unspecified)
					   (bg-mode-line-active bg-blue-intense)
					   (fg-mode-line-active fg-main))))

(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-modal-icon nil)
  (setq doom-modeline-env-version t))

(use-package all-the-icons)

(use-package nerd-icons
  :config
  (defun nerd-icons--web-mode-icon (&rest arg-overrides)
    "Get icon for a `web-mode' buffer with ARG-OVERRIDES."
    (all-the-icons--web-mode nil arg-overrides)))

#+end_src

* Init file
** Header
:PROPERTIES:
:VISIBILITY: folded
:END:
#+begin_src emacs-lisp
;;; package --- Init.el
;;; Commentary: This is my Emacs configuration. It works with the current bleeding edge Emacs version.
;;; Code:
#+end_src

** Configuration
:PROPERTIES:
:VISIBILITY: all
:END:
#+begin_src emacs-lisp
(add-hook 'after-save-hook (lambda () (when (equal (f-filename buffer-file-name) "init.org")
					(org-babel-tangle-file "init.org"))))

(add-to-list 'exec-path "/home/sliberman/bin/omnisharp")
(add-to-list 'exec-path "/home/sliberman/bin/netcoredbg")

(use-package calendar
  :config
  (setq calendar-week-start-day 1))

(setq native-comp-async-report-warnings-errors nil)

(use-package vertico
  :straight (vertico :files (:defaults "extensions/*.el"))
  :init
  (vertico-mode 1)
  (setq vertico-cycle t)
  (unbind-key (kbd "C-m") 'vertico-map))

(use-package vertico-repeat
  :commands (vertico-repeat-save vertico-repeat)
  :straight (vertico :files (:defaults "extensions/*.el"))
  :init
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  :bind
  ("M-R" . #'vertico-repeat))

(use-package vertico-quick
  :commands (vertico-quick-insert vertico-quick-exit)
  :straight (vertico :files (:defaults "extensions/*.el"))
  :init
  (keymap-set vertico-map "M-q" #'vertico-quick-insert)
  (keymap-set vertico-map "C-q" #'vertico-quick-exit))

(use-package orderless
  :config
  (setq completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))
	completion-ignore-case t)
  (defun orderless-fast-dispatch (word index total)
    (and (= index 0) (= total 1) (length< word 4)
	 `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

  (orderless-define-completion-style orderless-fast
    (orderless-style-dispatchers '(orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp))))

(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode 1))

(use-package corfu
  :init
  (global-corfu-mode 1)
  (setq corfu-auto t
	corfu-auto-delay 0.2
	corfu-auto-prefix 3
	corfu-preview-current t
	corfu-quit-no-match 'separator)

  :bind (:map corfu-map
	      ("TAB" . corfu-complete)
	      ([tab] . corfu-complete)
	      ("RET" . corfu-complete)
	      ([ret] . corfu-complete)))

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(setq completion-cycle-threshold 3)
(setq tab-always-indent 'complete)

(use-package embark
  :commands (embark-act embark-dwim embark-bindings)
  :init
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  (dolist (map (list corfu-map minibuffer-mode-map))
    (define-key map (kbd "C-.") 'embark-act)
    (define-key map (kbd "M-.") 'embark-dwim)
    (define-key map (kbd "C-h B") 'embark-bindings))
  (global-set-key (kbd "C-.") 'embark-act)
  :custom
  (embark-prompter 'embark-keymap-prompter)
  (embark-quit-after-action '((t . nil)))
  :config
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package cape)

(use-package which-key
  :init
  (which-key-mode 1))

(global-set-key (kbd "C-c e e") #'(lambda () (interactive) (find-file "~/Documents/src/configuration/init.org")))

(global-display-line-numbers-mode 1)
;; (setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook
		vterm-mode-hook
		treemacs-mode-hook
		inferior-python-mode-hook
		pdf-view-mode-hook))
  (add-hook mode #'(lambda () (display-line-numbers-mode 0))))

(add-hook 'Info-mode-hook (lambda ()
			    (display-line-numbers-mode -1)))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(show-paren-mode 1)
(setq show-paren-style 'expression)
(setq show-paren-when-point-inside-paren nil)

(setq display-time-default-load-average nil)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-format "%H:%M %d-%m-%Y")
(display-time-mode)

(display-battery-mode 1)

(use-package consult
  :bind (("C-x f" . consult-find)
	 ("C-x b" . consult-buffer)
	 ("C-x C-b" . consult-buffer)
	 ("C-c e t" . consult-theme)
	 ("C-x ," . consult-recent-file)
	 ("C-c o" . consult-outline)
	 (:map minibuffer-local-map
	       ("C-r" . consult-history)))
  :config
  (consult-customize consult-theme :preview-key '(:debounce 0.5 any)))

(winner-mode 1)

(use-package vterm
  :commands (vterm vterm-other-window)
  :config
  (setq vterm-shell "/usr/bin/bash")
  :bind
  (("C-c x x" . 'vterm)
   ("C-c x v" . 'vterm-other-window)))

(setq inhibit-startup-message t)
(setq system-time-locale "C")
(tooltip-mode 1)
(setq visual-bell t)

(setq enable-local-eval t)

(put 'python-shell-extra-pythonpaths 'safe-local-variable (lambda (_) t))

(use-package dockerfile-mode
  :mode ("\\.dockerfile\\'" . dockerfile-mode))

(unbind-key (kbd "C-x C-z") global-map)

(use-package helpful
  :bind
  ("C-h f" . helpful-function)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h ." . helpful-at-point))

(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode))

(use-package docker
  :commands (docker docker-compose)
  :init
  (setq docker-run-async-with-buffer-function 'docker-run-async-with-buffer-vterm))

(use-package pyvenv
  :config
  (add-hook 'pyvenv-post-activate-hooks #'(lambda ()
					    (setq eglot-workspace-configuration
					     `(:pylsp
					       (:plugins
						(:black
						 (:enabled t
						  :line_length 120)
						 :yapf
						 (:enabled :json-false)
						 :isort
						 (:enabled t)
						 :autopep8
						 (:enabled t)
						 :pycodestyle
						 (:enabled :json-false)
						 :mccabe
						 (:enabled :json-false)
						 :pyflakes
						 (:enabled :json-false)
						 :pylint
						 (:enabled t)
						 :flake8
						 (:enabled t)
						 :pydocstyle
						 (:enabled t
						  :convention "google")
						 :jedi
						 (:environment ,(f-expand pyvenv-virtual-env)))
						:configurationSources
						["flake8"])))) 1)
  (add-hook 'pyvenv-post-activate-hooks 'eglot-ensure 2)
  :commands (pyvenv-mode pyvenv-tracking-mode))

(use-package poetry
  :commands (poetry poetry-venv-workon))

(global-set-key (kbd "C-c r") 'revert-buffer)

(use-package avy
  :commands (avy-goto-char))

(global-set-key (kbd "C-x C-k") 'kill-this-buffer)

(defun sergio/visual-fill ()
  (setq visual-fill-column-width 120
	visual-fill-column-center-text t
	visual-fill-column-fringes-outside-margins nil)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook ((org-mode . sergio/visual-fill)))

(use-package org-roam
  :commands (org-roam-node-find)
  :init
  (setq org-roam-directory "/home/sliberman/Documents/Google Drive/RoamNotes/")
  :config
  (org-roam-db-autosync-mode 1)
  :bind
  ("C-c n" . 'org-roam-node-find))

(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t
      backup-directory-alist '(("." . "~/.emacs.d/backups")))

(use-package eglot
  :commands (eglot eglot-ensure)
  :preface
  (defun mp-eglot-eldoc ()
    (setq eldoc-documentation-strategy
	  'eldoc-documentation-compose-eagerly))
  :config
  (add-to-list 'eglot-server-programs
	       `(terraform-mode "terraform-ls" "serve"))
  (add-to-list 'eglot-server-programs
	       `(python-base-mode . ,(eglot-alternatives
				      `("pylsp" "pyls" ("pyright-langserver" "--stdio") "jedi-language-server"))))
  (set-face-attribute 'eglot-highlight-symbol-face nil :inherit 'bold :underline t)
  (add-hook 'eglot-managed-mode-hook 'mp-eglot-eldoc)
  (global-set-key (kbd "C-<down-mouse-1>") #'xref-find-definitions-at-mouse)
  (global-set-key (kbd "C-S-<down-mouse-1>") #'xref-find-references-at-mouse)
  (global-set-key (kbd "<mouse-9>") #'xref-go-forward)
  (global-set-key (kbd "<mouse-8>") #'xref-go-back)
  :bind (("C-c l r" . 'eglot-rename)
	 ("C-c l =" . 'eglot-format-buffer)
	 ("C-c l a" . 'eglot-code-actions)
	 ("C-c l e" . 'flymake-show-buffer-diagnostics)))

(use-package python
  :bind (:map python-mode-map
	      (("M-<left>" . python-indent-shift-left)
	       ("M-<right>" . python-indent-shift-right)))
  :config
  (add-hook 'python-mode-hook 'poetry-venv-workon -100 nil)
  (add-hook 'python-mode-hook #'(lambda () (require 'dap-python)))
  (add-hook 'python-mode-hook #'(lambda () (add-hook 'before-save-hook (lambda () (interactive) (when (eglot-managed-p) (eglot-format-buffer))) nil t)))
  (add-hook 'python-mode-hook 'which-function-mode)
  :mode ("\\.py$" . python-mode))

(load-file "~/.emacs.d/fix_keywords_align.el")

;; Indent the buffer in emacs-lisp mode and lisp-data mode
(defun sergio/add-indent-to-hook ()
  "Add indent to before save hook."
  (add-hook 'before-save-hook (lambda ()
				(interactive)
				(save-excursion
				  (indent-region (point-min) (point-max)))) nil t))

(use-package terraform-mode
  :init
  (add-hook 'terraform-mode-hook 'eglot-ensure)
  :mode
  ("\\.tf$" . terraform-mode))

(add-hook 'emacs-lisp-mode-hook 'sergio/add-indent-to-hook)
(add-hook 'lisp-data-mode-hook 'sergio/add-indent-to-hook)

(use-package markdown-mode)

(use-package web-mode
  :init
  (add-hook 'web-mode-hook 'eglot-ensure)
  :mode (("\\.ts\\'" . web-mode)
	 ("\\.js\\'" . web-mode)
	 ("\\.mjs\\'" . web-mode)
	 ("\\.tsx\\'" . web-mode)
	 ("\\.svelte\\'" . web-mode)
	 ("\\.jsx\\'" . web-mode))
  :config
  (add-to-list 'eglot-server-programs '(web-mode "svelteserver" "--stdio"))
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))
	web-mode-engines-alist '(("svelte"  . "\\.svelte\\.")))
  (setq web-mode-markup-indent-offset 2)
  (add-hook 'web-mode-hook (lambda () (setq-local tab-width 2))))

(use-package emacs
  :after eglot
  :config
  (add-to-list 'eglot-server-programs '(js-json-mode "vscode-json-languageserver" "--stdio"))
  (add-hook 'js-mode-hook (lambda () (setq-local tab-width 2)))
  :mode ("\\.js\\'" . js-mode))

(use-package dired
  :straight nil
  :init
  (add-hook 'dired-mode-hook 'dired-hide-details-mode))

(use-package ede
  :config
  (global-ede-mode t))

(use-package project
  :config
  (defun sergio/project-rg ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (consult-ripgrep default-directory)))
  (define-key project-prefix-map "r" 'sergio/project-rg)
  (add-to-list 'project-switch-commands (list 'sergio/project-rg "Ripgrep"))

  (setq project-switch-commands (remove '(project-vc-dir "VC-Dir") project-switch-commands))

  (defun sergio/project-poetry ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (poetry)))
  (define-key project-prefix-map "v" 'sergio/project-poetry)
  (add-to-list 'project-switch-commands (list 'sergio/project-poetry "Poetry"))

  (defun sergio/project-magit ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (magit-status)))
  (define-key project-prefix-map "m" 'sergio/project-magit)
  (add-to-list 'project-switch-commands (list 'sergio/project-magit "Magit"))

  (setq project-find-functions (list #'project-try-ede #'project-try-vc))
  (add-to-list 'project-switch-commands (list 'project-switch-to-buffer "List buffers")))

(use-package eldoc
  :init
  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
  (add-to-list 'display-buffer-alist
	       '("^\\*eldoc for" display-buffer-at-bottom
		 (window-height . 4))))

(defun mp-flycheck-eldoc (callback &rest _ignored)
  "Print flycheck messages at point by calling CALLBACK."
  (when-let ((flycheck-errors (and flycheck-mode (flycheck-overlay-errors-at (point)))))
    (mapc
     (lambda (err)
       (funcall callback
		(format "%s: %s"
			(let ((level (flycheck-error-level err)))
			  (pcase level
			    ('info (propertize "I" 'face 'flycheck-error-list-info))
			    ('error (propertize "E" 'face 'flycheck-error-list-error))
			    ('warning (propertize "W" 'face 'flycheck-error-list-warning))
			    (_ level)))
			(flycheck-error-message err))
		:thing (or (flycheck-error-id err)
			   (flycheck-error-group err))
		:face 'font-lock-doc-face))
     flycheck-errors)))

(electric-pair-mode 1)

(defun safe-local-variable-p (sym val) t)

(use-package dap-mode
  :config
  (setq dap-python-debugger 'debugpy)
  (setq dap-auto-configure-features '(sessions locals controls tooltip repl))
  (dap-auto-configure-mode 1)
  :bind (:map project-prefix-map
	      ("C-c C-d C-d" . dap-debug)
	      ("C-c C-d d" . dap-debug)
	      ("C-c C-d k" . dap-delete-all-sessions)
	      ("C-c C-d C-k" . dap-delete-all-sessions)
	      ("C-c C-d e" . dap-debug-edit-template)
	      ("C-c C-d C-e" . dap-debug-edit-template))
  :init
  (defun sergio/set-pointer-arrow ()
    (interactive)
    (setq-local x-pointer-shape x-pointer-top-left-arrow)
    (set-mouse-color "black"))
  :hook
  (treemacs-mode . sergio/set-pointer-arrow))

(use-package restclient
  :commands (restclient-mode))

(use-package ob-restclient
  :after org)

(use-package org
  :init
  (defun sergio/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 2.0)
		    (org-level-2 . 1.3)
		    (org-level-3 . 1.1)
		    (org-level-4 . 1.1)
		    (org-level-5 . 1.0)
		    (org-level-6 . 1.0)
		    (org-level-7 . 1.0)
		    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :height (cdr face)))
    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    ;; (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (setq org-todo-keywords (quote ((sequence "TODO(t)" "|" "ABANDONED(b)" "DONE(d)"))))
    (setq org-log-done t))
  (defun sergio/check-cell ()
    (interactive)
    (let ((cell (org-table-get-field)))
      (if (string-match "[[:graph:]]" cell)
          (org-table-blank-field)
	(insert "X")
	(org-table-align))
      (org-table-next-row)))
  :custom
  (org-ellipsis " ▼")
  (org-latex-pdf-process (list "latexmk -f -pdf %f"))
  (org-confirm-babel-evaluate nil)
  (org-image-actual-width nil)
  (org-latex-caption-above nil)
  (org-src-window-setup 'current-window)
  (org-edit-src-content-indentation 0)
  (org-M-RET-may-split-line '((default)))
  (org-odt-preferred-output-format "docx")
  :hook
  (org-mode . url-handler-mode)
  (org-mode . visual-line-mode)
  (org-mode . org-indent-mode)
  (org-mode . sergio/org-font-setup)
  (org-mode . org-modern-mode)
  :config
  (setq org-indent-indentation-per-level 2)
  (require 'ox-md)
  (require 'org-tempo)
  (dolist (template '(("sh" . "src shell")
		      ("el" . "src emacs-lisp")
		      ("py" . "src python")
		      ("ja" . "src java")
		      ("sql" . "src sql")
		      ("yaml" . "src yaml")
		      ("rest" . "src restclient")
		      ("cc" . "src C")))
    (add-to-list 'org-structure-template-alist template))

  ;; Babel languages.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (shell . t)
     (C . t)
     (sql . t)
     (java . t)
     (restclient . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  :mode ("\\.org$" . org-mode)
  :commands (org-store-link org-agenda org-capture))

(global-set-key (kbd "C-c C-l") #'org-store-link)
(global-set-key (kbd "C-c C-a") #'org-agenda)
(global-set-key (kbd "C-c C->") #'org-capture)

(use-package org-modern)

(add-hook 'prog-mode 'electric-indent-mode)

(size-indication-mode -1)

(use-package move-text
  :bind
  ("M-<up>" . move-text-up)
  ("M-<down>" . move-text-down))

(use-package csharp-mode
  :straight nil
  :init
  (add-hook 'csharp-ts-mode-hook 'eglot-ensure)
  (add-hook 'csharp-ts-mode-hook 'dap-mode)
  (add-hook 'csharp-ts-mode-hook #'(lambda () (require 'dap-netcore)))
  ;;(add-hook 'csharp-ts-mode-hook #'(lambda () (c-set-style "awk")))
  (add-hook 'csharp-ts-mode-hook #'(lambda () (setq-local tab-width 4)))
  :config
  :mode ("\\.cs$" . csharp-ts-mode))

(use-package multi-vterm
  :bind
  ("<f5>" . multi-vterm-dedicated-toggle)
  :config
  (setq multi-vterm-dedicated-window-height-percent 20))

(tab-bar-mode 1)

(xterm-mouse-mode 1)

(use-package lispy
  :commands (lispy-mode))

(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)

(setq vc-handled-backends '(Git))

(windmove-default-keybindings '(ctrl meta))

(use-package magit
  :bind ("C-x g" . magit-status))

(use-package json-mode
  :mode ("\\.json$" . json-mode))

(use-package codespaces
  :config
  (codespaces-setup)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (setq tramp-ssh-controlmaster-options "")
  :bind ("C-c S" . #'codespaces-connect))

(recentf-mode 1)

(use-package forge
  :after magit)

(use-package savehist
  :init
  (savehist-mode 1))

(use-package saveplace
  :init
  (save-place-mode 1))

(setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

(use-package yasnippet
  :hook
  (prog-mode . yas-minor-mode))

(use-package yasnippet-snippets)

(global-unset-key (kbd "C-z"))

(use-package fixmee)

(setq backup-directory-alist
      `((".*" . "~/.emacs-saves")))
(setq auto-save-file-name-transforms
      `((".*" "~/.emacs-saves" t)))

(use-package expand-region
  :bind
  ("C-=" . er/expand-region))

(use-package multiple-cursors
  :bind
  ("C-<" . mc/mark-next-like-this)
  ("C->" . mc/mark-previous-like-this)
  ("C-c M-<" . mc/mark-all-like-this))
#+end_src

* Fix keywords alignment
#+BEGIN_SRC emacs-lisp :tangle /home/sliberman/.emacs.d/fix_keywords_align.el
  (advice-add #'calculate-lisp-indent :override #'void~calculate-lisp-indent)

  (defun void~calculate-lisp-indent (&optional parse-start)
    "Add better indentation for quoted and backquoted lists."
    ;; This line because `calculate-lisp-indent-last-sexp` was defined with `defvar` 
    ;; with it's value ommited, marking it special and only defining it locally. So  
    ;; if you don't have this, you'll get a void variable error.
    (defvar calculate-lisp-indent-last-sexp)
    (save-excursion
      (beginning-of-line)
      (let ((indent-point (point))
            state
            ;; setting this to a number inhibits calling hook
            (desired-indent nil)
            (retry t)
            calculate-lisp-indent-last-sexp containing-sexp)
        (cond ((or (markerp parse-start) (integerp parse-start))
               (goto-char parse-start))
              ((null parse-start) (beginning-of-defun))
              (t (setq state parse-start)))
        (unless state
          ;; Find outermost containing sexp
          (while (< (point) indent-point)
            (setq state (parse-partial-sexp (point) indent-point 0))))
        ;; Find innermost containing sexp
        (while (and retry
                    state
                    (> (elt state 0) 0))
          (setq retry nil)
          (setq calculate-lisp-indent-last-sexp (elt state 2))
          (setq containing-sexp (elt state 1))
          ;; Position following last unclosed open.
          (goto-char (1+ containing-sexp))
          ;; Is there a complete sexp since then?
          (if (and calculate-lisp-indent-last-sexp
                   (> calculate-lisp-indent-last-sexp (point)))
              ;; Yes, but is there a containing sexp after that?
              (let ((peek (parse-partial-sexp calculate-lisp-indent-last-sexp
                                              indent-point 0)))
                (if (setq retry (car (cdr peek))) (setq state peek)))))
        (if retry
            nil
          ;; Innermost containing sexp found
          (goto-char (1+ containing-sexp))
          (if (not calculate-lisp-indent-last-sexp)
              ;; indent-point immediately follows open paren.
              ;; Don't call hook.
              (setq desired-indent (current-column))
            ;; Find the start of first element of containing sexp.
            (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
            (cond ((looking-at "\\s(")
                   ;; First element of containing sexp is a list.
                   ;; Indent under that list.
                   )
                  ((> (save-excursion (forward-line 1) (point))
                      calculate-lisp-indent-last-sexp)
                   ;; This is the first line to start within the containing sexp.
                   ;; It's almost certainly a function call.
                   (if (or
                        ;; Containing sexp has nothing before this line
                        ;; except the first element. Indent under that element.
                        (= (point) calculate-lisp-indent-last-sexp)

                        ;; First sexp after `containing-sexp' is a keyword. This
                        ;; condition is more debatable. It's so that I can have
                        ;; unquoted plists in macros. It assumes that you won't
                        ;; make a function whose name is a keyword.
                        ;; (when-let (char-after (char-after (1+ containing-sexp)))
                        ;;   (char-equal char-after ?:))

                        ;; Check for quotes or backquotes around.
                        (let* ((positions (elt state 9))
                               (last (car (last positions)))
                               (rest (reverse (butlast positions)))
                               (any-quoted-p nil)
                               (point nil))
                          (or
                           (when-let (char (char-before last))
                             (or (char-equal char ?')
                                 (char-equal char ?`)))
                           (progn
                             (while (and rest (not any-quoted-p))
                               (setq point (pop rest))
                               (setq any-quoted-p
                                     (or
                                      (when-let (char (char-before point))
                                        (or (char-equal char ?')
                                            (char-equal char ?`)))
                                      (save-excursion
                                        (goto-char (1+ point))
                                        (looking-at-p
                                         "\\(?:back\\)?quote[\t\n\f\s]+(")))))
                             any-quoted-p))))
                       ;; Containing sexp has nothing before this line
                       ;; except the first element.  Indent under that element.
                       nil
                     ;; Skip the first element, find start of second (the first
                     ;; argument of the function call) and indent under.
                     (progn (forward-sexp 1)
                            (parse-partial-sexp (point)
                                                calculate-lisp-indent-last-sexp
                                                0 t)))
                   (backward-prefix-chars))
                  (t
                   ;; Indent beneath first sexp on same line as
                   ;; `calculate-lisp-indent-last-sexp'.  Again, it's
                   ;; almost certainly a function call.
                   (goto-char calculate-lisp-indent-last-sexp)
                   (beginning-of-line)
                   (parse-partial-sexp (point) calculate-lisp-indent-last-sexp
                                       0 t)
                   (backward-prefix-chars)))))
        ;; Point is at the point to indent under unless we are inside a string.
        ;; Call indentation hook except when overridden by lisp-indent-offset
        ;; or if the desired indentation has already been computed.
        (let ((normal-indent (current-column)))
          (cond ((elt state 3)
                 ;; Inside a string, don't change indentation.
                 nil)
                ((and (integerp lisp-indent-offset) containing-sexp)
                 ;; Indent by constant offset
                 (goto-char containing-sexp)
                 (+ (current-column) lisp-indent-offset))
                ;; in this case calculate-lisp-indent-last-sexp is not nil
                (calculate-lisp-indent-last-sexp
                 (or
                  ;; try to align the parameters of a known function
                  (and lisp-indent-function
                       (not retry)
                       (funcall lisp-indent-function indent-point state))
                  ;; If the function has no special alignment
                  ;; or it does not apply to this argument,
                  ;; try to align a constant-symbol under the last
                  ;; preceding constant symbol, if there is such one of
                  ;; the last 2 preceding symbols, in the previous
                  ;; uncommented line.
                  (and (save-excursion
                         (goto-char indent-point)
                         (skip-chars-forward " \t")
                         (looking-at ":"))
                       ;; The last sexp may not be at the indentation
                       ;; where it begins, so find that one, instead.
                       (save-excursion
                         (goto-char calculate-lisp-indent-last-sexp)
                         ;; Handle prefix characters and whitespace
                         ;; following an open paren.  (Bug#1012)
                         (backward-prefix-chars)
                         (while (not (or (looking-back "^[ \t]*\\|([ \t]+"
                                                       (line-beginning-position))
                                         (and containing-sexp
                                              (>= (1+ containing-sexp) (point)))))
                           (forward-sexp -1)
                           (backward-prefix-chars))
                         (setq calculate-lisp-indent-last-sexp (point)))
                       (> calculate-lisp-indent-last-sexp
                          (save-excursion
                            (goto-char (1+ containing-sexp))
                            (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
                            (point)))
                       (let ((parse-sexp-ignore-comments t)
                             indent)
                         (goto-char calculate-lisp-indent-last-sexp)
                         (or (and (looking-at ":")
                                  (setq indent (current-column)))
                             (and (< (line-beginning-position)
                                     (prog2 (backward-sexp) (point)))
                                  (looking-at ":")
                                  (setq indent (current-column))))
                         indent))
                  ;; another symbols or constants not preceded by a constant
                  ;; as defined above.
                  normal-indent))
                ;; in this case calculate-lisp-indent-last-sexp is nil
                (desired-indent)
                (t
                 normal-indent))))))
#+END_SRC
