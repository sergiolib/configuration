#+PROPERTY: header-args :tangle  /home/sliberman/.emacs.d/init.el

* Early file
#+begin_src emacs-lisp :tangle /home/sliberman/.emacs.d/early-init.el
(setq package-enable-at-startup nil)
#+end_src

* Init file
** Header
#+begin_src emacs-lisp
;;; package --- Init.el
;;; Commentary: This is my Emacs configuration. It works with the current bleeding edge Emacs version.
;;; Code:
#+end_src

** Configuration
#+begin_src emacs-lisp
(add-hook 'after-save-hook (lambda () (when (equal (f-filename buffer-file-name) "init.org")
					(org-babel-tangle-file "init.org"))))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)

(add-to-list 'exec-path "/home/sliberman/bin/omnisharp-linux-x64-net6.0")
(add-to-list 'exec-path "/home/sliberman/bin/netcoredbg")

(defvar native-comp-deferred-compilation-deny-list nil)

(use-package calendar
  :config
  (setq calendar-week-start-day 1))

(setq native-comp-async-report-warnings-errors nil)

(use-package undo-tree
  :config
  (setq undo-tree-limit 10000000
	undo-limit 10000000
	undo-strong-limit 10000000
	undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-tree-history/")))
  (global-undo-tree-mode 1)
  (defadvice undo-tree-make-history-save-file-name
      (after undo-tree activate)
    (setq ad-return-value (concat ad-return-value ".gz"))))

(use-package evil
  :init
  (setq evil-want-keybinding nil)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-p") nil)
  (define-key evil-insert-state-map (kbd "C-n") nil)
  (global-set-key (kbd "C-M-u") 'universal-argument)
  :custom
  (evil-undo-system 'undo-tree)
  (evil-want-integration t)
  (evil-want-C-u-scroll t)
  (evil-want-C-d-scroll t)
  (evil-want-C-i-jump t)
  (evil-want-fine-undo t)
  (evil-esc-delay 0.001)
  (evil-auto-indent t)
  (evil-jumps-cross-buffers nil)
  (evil-symbol-word-search t))

(use-package general
  :init
  (general-create-definer leader
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

(use-package evil-collection
  :init
  (evil-collection-init)
  :general
  (leader
    "<" 'evil-collection-consult-mark
    "y" 'consult-yank-from-kill-ring
    "," 'consult-recent-file
    "r" 'consult-register))

(use-package evil-surround
  :init
  (global-evil-surround-mode 1))

(use-package modus-themes
  :config
  (load-theme 'modus-operandi t)
  :custom
  (modus-themes-common-palette-overrides '((border-mode-line-active unspecified)
					   (border-mode-line-inactive unspecified)
					   (bg-mode-line-active bg-blue-intense)
					   (fg-mode-line-active fg-main))))

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(use-package vertico
  :straight (vertico :files (:defaults "extensions/*.el"))
  :init
  (vertico-mode 1)
  (setq vertico-cycle t)
  (unbind-key (kbd "C-m") 'vertico-map))

(use-package vertico-repeat
  :commands (vertico-repeat-save vertico-repeat)
  :straight (vertico :files (:defaults "extensions/*.el"))
  :init
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  :bind
  ("M-R" . #'vertico-repeat))

(use-package vertico-quick
  :commands (vertico-quick-insert vertico-quick-exit)
  :straight (vertico :files (:defaults "extensions/*.el"))
  :init
  (keymap-set vertico-map "M-q" #'vertico-quick-insert)
  (keymap-set vertico-map "C-q" #'vertico-quick-exit))

(use-package orderless
  :config
  (setq completion-styles '(orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))
	completion-ignore-case t)
  (defun orderless-fast-dispatch (word index total)
    (and (= index 0) (= total 1) (length< word 4)
	 `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

  (orderless-define-completion-style orderless-fast
    (orderless-style-dispatchers '(orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp))))

(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode 1))

(use-package corfu
  :init
  (global-corfu-mode 1)
  (setq corfu-auto t
	corfu-auto-delay 0
	corfu-auto-prefix 1
	corfu-preview-current t
	corfu-quit-no-match 'separator)

  :bind (:map corfu-map
	 ("TAB" . corfu-complete)
	 ([tab] . corfu-complete)
	 ("RET" . corfu-complete)
	 ([ret] . corfu-complete))
  :config
  (evil-define-key '(insert normal visual) corfu-map (kbd "C-j") nil))

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(setq completion-cycle-threshold 3)
(setq tab-always-indent 'complete)

(use-package embark
  :commands (embark-act embark-dwim embark-bindings)
  :init
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  (dolist (map (list corfu-map
		     minibuffer-mode-map
		     evil-insert-state-map
		     evil-normal-state-map
		     evil-visual-state-map
		     evil-emacs-state-map))
    (define-key map (kbd "C-.") 'embark-act)
    (define-key map (kbd "M-.") 'embark-dwim)
    (define-key map (kbd "C-h B") 'embark-bindings))
  :custom
  (embark-prompter 'embark-keymap-prompter)
  (embark-quit-after-action '((t . nil)))
  :config
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package cape)

(use-package which-key
  :init
  (which-key-mode 1))

(leader
  "e" '(:ignore t :which-key "Emacs configuration")
  "ee" '((lambda () (interactive) (find-file "~/Documents/src/dotfiles/init.org")) :which-key "Open init file"))

(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook
		vterm-mode-hook
		treemacs-mode-hook
		inferior-python-mode-hook
		pdf-view-mode-hook))
  (add-hook mode #'(lambda () (display-line-numbers-mode 0))))

(defun set-window-faces (frame)
  "Set font families and sizes for all frames.
FRAME is the frame where the setting gets done."
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "JetBrains Mono" :height 120)
  (set-face-attribute 'variable-pitch nil :family "Cantarell" :height 130)
  (remove-hook 'after-make-frame-functions 'set-window-faces))

(add-hook 'Info-mode-hook (lambda ()
			    (display-line-numbers-mode -1)))

(if (and (boundp 'server-process)
	 (processp server-process)
	 (server-running-p))
    (add-hook 'after-make-frame-functions #'set-window-faces)
  (set-window-faces nil))

(leader
  "t" '(:ignore t :which-key "Tabs")
  "tr" 'tab-rename
  "th" 'tab-previous
  "tl" 'tab-next
  "tn" 'tab-new
  "tk" 'tab-close)

(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-modal-icon nil)
  (setq doom-modeline-env-version t))

(use-package all-the-icons)

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(show-paren-mode 1)
(setq show-paren-style 'expression)
(setq show-paren-when-point-inside-paren nil)

(setq initial-scratch-message "")

(column-number-mode 1)

(setq display-time-default-load-average nil)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-format "%H:%M %d-%m-%Y")
(display-time-mode)

(display-battery-mode 1)

(use-package consult
  :bind (
	 ("C-x f" . consult-find)
	 ("C-s" . consult-line)
	 (:map minibuffer-local-map
	  ("C-r" . consult-history)
	  ("C-x b" . consult-buffer)))
  :general (leader
	     "et" 'consult-theme
	     "o" 'consult-outline)
  :config
  (consult-customize consult-theme :preview-key '(:debounce 0.5 any)))

(winner-mode 1)

(use-package magit
  :general
  (leader
    "g" '(:ignore t :which-key "git")
    "gg" 'magit-status))

(use-package vterm
  :config
  (setq vterm-shell "/usr/bin/bash")
  (evil-set-initial-state 'vterm-mode 'normal)
  :general
  (leader
    "x" '(:ignore t :which-key "Terminals")
    "xx" 'vterm
    "xv" 'vterm-other-window
    "v" '(:ignore t :which-key "VTerms")))

(leader
  "p" '(:keymap project-prefix-map :package project :which-key "project"))

(setq inhibit-startup-message t)
(setq system-time-locale "C")
(tooltip-mode 1)
(setq visual-bell t)

(setq enable-local-eval t)

(put 'python-shell-extra-pythonpaths 'safe-local-variable (lambda (_) t))

(use-package dockerfile-mode
  :mode ("\\.dockerfile\\'" . dockerfile-mode))

(unbind-key (kbd "C-x C-z") global-map)

(use-package helpful
  :bind
  ("C-h f" . helpful-function)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h ." . helpful-at-point))

(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode))

(use-package docker
  :init
  (setq docker-run-async-with-buffer-function 'docker-run-async-with-buffer-vterm)
  (setq docker-compose-command "podman-compose")
  :general
  (leader
    "d" '(:ignore t :which-key "Containers")
    "dd" 'docker
    "dc" 'docker-compose))

(use-package evil-nerd-commenter
  :bind
  ("M-/" . evilnc-comment-or-uncomment-lines))

(use-package evil-multiedit
  :config
  (evil-multiedit-default-keybinds)
  (unbind-key (kbd "<insert-state> RET") 'evil-multiedit-mode-map)
  :custom
  (evil-multiedit-use-symbols nil))

(use-package pyvenv
  :commands (pyvenv-mode pyvenv-tracking-mode))

(use-package poetry)

(leader "er" 'revert-buffer)

(recentf-mode 1)

(use-package avy
  :commands (avy-goto-char)
  :init
  (define-key evil-normal-state-map (kbd "g c") 'avy-goto-char))

(global-set-key (kbd "C-x C-k") 'kill-this-buffer)

(defun sergio/visual-fill ()
  (setq visual-fill-column-width 120
	visual-fill-column-center-text t
	visual-fill-column-fringes-outside-margins nil)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook ((org-mode . sergio/visual-fill)))

(use-package org-roam
  :init
  (setq org-roam-directory "/home/sliberman/Documents/RoamNotes/")
  (org-roam-db-autosync-mode 1)
  :general
  (leader
    "n" '(:ignore t :which-key "Notes")
    "nf" 'org-roam-node-find))

(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t
      backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; (use-package flyspell
;;   :hook
;;   (org-mode . flyspell-mode))

(use-package eglot
  :commands (eglot eglot-ensure)
  :preface
  (defun mp-eglot-eldoc ()
    (setq eldoc-documentation-strategy
	  'eldoc-documentation-compose-eagerly))
  :config
  (add-to-list 'eglot-server-programs
	       `(terraform-mode "terraform-ls" "serve"))
  (add-to-list 'eglot-server-programs
	       `(python-base-mode . ,(eglot-alternatives
				      `("pylsp" "pyls" ("pyright-langserver" "--stdio") "jedi-language-server"))))
  (set-face-attribute 'eglot-highlight-symbol-face nil :inherit 'bold :underline t)
  (add-hook 'eglot-managed-mode-hook 'mp-eglot-eldoc)
  (global-set-key (kbd "C-<down-mouse-1>") #'xref-find-definitions-at-mouse)
  (global-set-key (kbd "C-S-<down-mouse-1>") #'xref-find-references-at-mouse)
  (global-set-key (kbd "<mouse-9>") #'xref-go-forward)
  (global-set-key (kbd "<mouse-8>") #'xref-go-back)
  :general (leader
	     "l" '(:ignore t :which-key "LSP")
	     "lr" 'eglot-rename
	     "l=" 'eglot-format-buffer
	     "la" 'eglot-code-actions
	     "lg" '(:ignore t :which-key "Go to")
	     "le" 'flymake-show-buffer-diagnostics))

(use-package python
  :init
  (add-hook 'python-mode-hook 'eglot-ensure)
  :config
  (setq-default eglot-workspace-configuration
		'(:pylsp
		  (:plugins
		   (:black
		    (:enabled t
		     :line_length 120)
		    :yapf
		    (:enabled :json-false)
		    :isort
		    (:enabled t)
		    :autopep8
		    (:enabled t)
		    :pycodestyle
		    (:enabled :json-false)
		    :mccabe
		    (:enabled :json-false)
		    :pyflakes
		    (:enabled :json-false)
		    :pylint
		    (:enabled t)
		    :flake8
		    (:enabled t)
		    :pydocstyle
		    (:enabled t
		     :convention "google"))
		   :configurationSources
		   ["flake8"])))
  :bind (:map python-mode-map
	 (("M-<left>" . python-indent-shift-left)
	  ("M-<right>" . python-indent-shift-right)))
  :hook
  (python-mode . poetry-venv-workon)
  (python-mode . (lambda () (require 'dap-python)))
  (python-mode . (lambda () (add-hook 'before-save-hook (lambda () (interactive) (when (eglot-managed-p) (eglot-format-buffer))) nil t)))
  (python-mode . (lambda () (yas-activate-extra-mode 'python-mode)))
  (python-mode . which-function-mode))

(load-file "~/.emacs.d/fix_keywords_align.el")

;; Indent the buffer in emacs-lisp mode and lisp-data mode
(defun sergio/add-indent-to-hook ()
  "Add indent to before save hook."
  (add-hook 'before-save-hook (lambda ()
				(interactive)
				(save-excursion
				  (indent-region (point-min) (point-max)))) nil t))

(use-package terraform-mode
  :init
  (add-hook 'terraform-mode-hook 'eglot-ensure))

(add-hook 'emacs-lisp-mode-hook 'flymake-mode)
(add-hook 'emacs-lisp-mode-hook 'sergio/add-indent-to-hook)
(add-hook 'lisp-data-mode-hook 'sergio/add-indent-to-hook)

(use-package markdown-mode)

(use-package web-mode
  :init
  (add-hook 'web-mode-hook 'eglot-ensure)
  :mode (("\\.ts\\'" . web-mode)
	 ("\\.js\\'" . web-mode)
	 ("\\.mjs\\'" . web-mode)
	 ("\\.tsx\\'" . web-mode)
	 ("\\.svelte\\'" . web-mode)
	 ("\\.jsx\\'" . web-mode))
  :config
  (add-to-list 'eglot-server-programs '(web-mode "svelteserver" "--stdio"))
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))
	web-mode-engines-alist '(("svelte"  . "\\.svelte\\.")))
  (setq web-mode-markup-indent-offset 2)
  (add-hook 'web-mode-hook (lambda () (setq-local tab-width 2))))

(use-package emacs
  :after eglot
  :config
  (add-to-list 'eglot-server-programs '(js-json-mode "vscode-json-languageserver" "--stdio"))
  (add-hook 'js-mode-hook (lambda () (setq-local tab-width 2)))
  :mode ("\\.js\\'" . js-mode))

(use-package dired
  :straight nil
  :init
  (add-hook 'dired-mode-hook 'dired-hide-details-mode))

(use-package ede
  :config
  (global-ede-mode t))

(use-package project
  :config
  (defun sergio/project-rg ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (consult-ripgrep default-directory)))
  (define-key project-prefix-map "r" 'sergio/project-rg)
  (add-to-list 'project-switch-commands (list 'sergio/project-rg "Ripgrep"))

  (defun sergio/project-magit ()
    (interactive)
    (let ((default-directory (project-root (project-current))))
      (magit-status)))
  (define-key project-prefix-map "m" 'sergio/project-magit)
  (add-to-list 'project-switch-commands (list 'sergio/project-magit "Magit"))

  (setq project-find-functions (list #'project-try-ede #'project-try-vc))
  (add-to-list 'project-switch-commands (list 'project-switch-to-buffer "List buffers")))

(use-package yasnippet
  :general
  (yas-minor-mode-map
   :states 'insert
   "TAB" 'nil)
  :hook
  (prog-mode . yas-minor-mode))

(use-package yasnippet-snippets)

(use-package dashboard
  :init
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  :config
  (dashboard-setup-startup-hook))

(use-package eldoc
  :init
  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
  (add-to-list 'display-buffer-alist
	       '("^\\*eldoc for" display-buffer-at-bottom
		 (window-height . 4))))

(defun mp-flycheck-eldoc (callback &rest _ignored)
  "Print flycheck messages at point by calling CALLBACK."
  (when-let ((flycheck-errors (and flycheck-mode (flycheck-overlay-errors-at (point)))))
    (mapc
     (lambda (err)
       (funcall callback
		(format "%s: %s"
			(let ((level (flycheck-error-level err)))
			  (pcase level
			    ('info (propertize "I" 'face 'flycheck-error-list-info))
			    ('error (propertize "E" 'face 'flycheck-error-list-error))
			    ('warning (propertize "W" 'face 'flycheck-error-list-warning))
			    (_ level)))
			(flycheck-error-message err))
		:thing (or (flycheck-error-id err)
			   (flycheck-error-group err))
		:face 'font-lock-doc-face))
     flycheck-errors)))

;; (setq safe-local-variable-values '((pyvenv-activate)
;; 				   (pyvenv-workon)))
(electric-pair-mode 1)

(leader
  "f" '(:ignore t :which-key "Files")
  "ff" 'find-file
  "fo" 'find-file-other-window)

(defun safe-local-variable-p (sym val)
  t)

;; (use-package importmagic)

(use-package nerd-icons)
(defun nerd-icons--web-mode-icon (&rest arg-overrides)
  "Get icon for a `web-mode' buffer with ARG-OVERRIDES."
  (all-the-icons--web-mode nil arg-overrides))

;; (use-package multi-vterm
;;   :config
;;   (add-hook 'vterm-mode-hook
;; 	    (lambda ()
;; 	      (setq-local evil-insert-state-cursor 'box)
;; 	      (evil-insert-state)))
;;   (define-key vterm-mode-map [return] #'vterm-send-return)
;;   (setq multi-vterm-dedicated-window-height-percent 30)

;;   (setq vterm-keymap-exceptions nil)
;;   (evil-define-key '(insert normal visual emacs) vterm-mode-map (kbd "<f10>") #'multi-vterm-dedicated-toggle))

(use-package dap-mode
  :config
  (setq dap-python-debugger 'debugpy)
  (setq dap-auto-configure-features '(sessions locals controls tooltip repl))
  (dap-auto-configure-mode 1)
  :bind (:map project-prefix-map
	 ("C-d" . nil)
	 ("C-d C-d" . dap-debug)
	 ("C-d d" . dap-debug)
	 ("C-d k" . dap-delete-all-sessions)
	 ("C-d e" . dap-debug-edit-template))
  (:map dap-mode-map
   ;; ("C-S-<f5>" . dap-debug-restart)
   ;; ("S-<f5>" . dap-disconnect)
   ;; ("<f5>" . dap-continue)
   ;; ("<f10>" . dap-next)
   ;; ("<f11>" . dap-step-in)
   ;; ("<f12>" . dap-step-out)
   )
  :init
  (defun sergio/set-pointer-arrow ()
    (interactive)
    (setq-local x-pointer-shape x-pointer-top-left-arrow)
    (set-mouse-color "black"))
  :hook
  (treemacs-mode . sergio/set-pointer-arrow))

(pixel-scroll-mode 1)

(use-package restclient
  :commands (restclient-mode))

(use-package ob-restclient)

(use-package org
  :config
  (defun sergio/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 2.0)
		    (org-level-2 . 1.3)
		    (org-level-3 . 1.1)
		    (org-level-4 . 1.1)
		    (org-level-5 . 1.0)
		    (org-level-6 . 1.0)
		    (org-level-7 . 1.0)
		    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :height (cdr face)))
    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face variable-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (setq org-todo-keywords
	  (quote ((sequence "TODO(t)" "|" "ABANDONED(b)" "DONE(d)"))))
    (setq org-log-done t))
  :custom
  (org-ellipsis " ▼")
  (org-latex-pdf-process (list "latexmk -f -pdf %f"))
  (org-confirm-babel-evaluate nil)
  (org-image-actual-width nil)
  (org-latex-caption-above nil)
  (org-src-window-setup 'current-window)
  (org-edit-src-content-indentation 0)
  (org-M-RET-may-split-line '((default)))
  ;; (org-export-in-background nil)
  (org-odt-preferred-output-format "docx")
  :hook
  (org-mode . url-handler-mode)
  (org-mode . visual-line-mode)
  (org-mode . (lambda () (variable-pitch-mode 1)))
  (org-mode . org-indent-mode)
  (org-mode . sergio/org-font-setup)
  (org-mode . (lambda () (setq-local evil-auto-indent nil)))
  :config
  (setq org-indent-indentation-per-level 2)
  (defun evil-org-insert-state-in-edit-buffer (fun &rest args)
    "Bind `evil-default-state' to `insert' before calling FUN with ARGS."
    (let ((evil-default-state 'insert)
	  ;; Force insert state
	  evil-emacs-state-modes
	  evil-normal-state-modes
	  evil-motion-state-modes
	  evil-visual-state-modes
	  evil-operator-state-modes
	  evil-replace-state-modes)
      (apply fun args)
      (evil-refresh-cursor)))

  (advice-add 'org-babel-do-key-sequence-in-edit-buffer
	      :around #'evil-org-insert-state-in-edit-buffer)

  (require 'ox-md)

  (require 'org-tempo)

  (dolist (template '(("sh" . "src shell")
		      ("el" . "src emacs-lisp")
		      ("py" . "src python")
		      ("ja" . "src java")
		      ("sql" . "src sql")
		      ("yaml" . "src yaml")
		      ("rest" . "src restclient")
		      ("cc" . "src C")))
    (add-to-list 'org-structure-template-alist template))

  ;; Babel languages.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (shell . t)
     (C . t)
     (sql . t)
     (java . t)
     (restclient . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  :mode ("\\.org\\'" . org-mode))

(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode)
  :config
  ;; (defface bullets '((default . (:family "Font Awesome 6 Free"))) "Face for the bullets in org mode")
  ;; (setq org-bullets-face-name 'bullets)
  (setq org-bullets-bullet-list '("◉" "○" "✸" "✿")))

(add-hook 'prog-mode 'electric-indent-mode)

(size-indication-mode 1)

(use-package csharp-mode
  :init
  (add-hook 'csharp-mode-hook 'eglot-ensure)
  (add-hook 'csharp-mode 'dap-mode)
  (add-hook 'csharp-mode #'(lambda () (require 'dap-netcore)))
  :general
  (leader "C-d" 'dap-debug))

(use-package multi-vterm
  :bind
  ("<f5>" . multi-vterm-dedicated-toggle)
  :config
  (setq multi-vterm-dedicated-window-height-percent 20)
  (add-hook 'vterm-mode-hook
	    (lambda ()
	      (setq-local evil-insert-state-cursor 'box)
	      (evil-insert-state)))
  (define-key vterm-mode-map [return]                      #'vterm-send-return)
  (setq vterm-keymap-exceptions nil)
  (evil-define-key '(insert normal visual) vterm-mode-map (kbd "<f5>")      #'multi-vterm-dedicated-toggle)
  (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
  (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
  (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
  (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
  (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
  (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
  (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))

(setq tab-line-exclude-modes '(vterm-mode))
(global-tab-line-mode 1)
#+end_src
